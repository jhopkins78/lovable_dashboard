"""
supabase_service.py
------------------
Handles Supabase connections and operations for logging agent activities.
"""

import os
import json
from supabase import create_client
from app.config import get_env_variable

# Get Supabase credentials from environment variables
SUPABASE_URL = get_env_variable("SUPABASE_URL")
SUPABASE_KEY = get_env_variable("SUPABASE_KEY")

# Initialize Supabase client
supabase = None
if SUPABASE_URL and SUPABASE_KEY:
    try:
        supabase = create_client(SUPABASE_URL, SUPABASE_KEY)
        print("Supabase client initialized successfully")
    except Exception as e:
        print(f"Error initializing Supabase client: {str(e)}")
else:
    print("Supabase credentials not found in environment variables")

def log_agent_activity(agent_type, input_payload, output):
    """
    Log agent activity to Supabase.
    
    Args:
        agent_type (str): Type of agent (e.g., "insight", "ltv", "lead_score")
        input_payload (dict): Input payload received by the agent
        output (dict): Output generated by the agent
        
    Returns:
        dict: Response from Supabase or None if logging failed
    """
    if not supabase:
        print("Supabase client not initialized, skipping log")
        return None
    
    try:
        # Ensure input_payload and output are JSON serializable
        if isinstance(input_payload, str):
            try:
                input_payload = json.loads(input_payload)
            except:
                input_payload = {"raw_input": input_payload}
                
        # Create log entry
        log_data = {
            "agent_type": agent_type,
            "input_payload": input_payload,
            "output": output
        }
        
        # Insert into Supabase
        response = supabase.table("agent_logs").insert(log_data).execute()
        print(f"Agent activity logged to Supabase: {agent_type}")
        return response.data
    except Exception as e:
        print(f"Error logging to Supabase: {str(e)}")
        return None
